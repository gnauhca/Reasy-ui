/* jshint maxlen:1000, quotmark:double */
// JSHint Default Configuration File (as on JSHint website)
// See http://jshint.com/docs/ for more details
// see http://jshint.com/docs/options/ for all Configuration explain
  
{
  //Settings
  "passfail": false,   // Stop on first error.
  "maxerr": 50,        // Maximum error before stopping.
  
  "maxerr": 50,        // {int} Maximum error before stopping

  //Predefined globals whom JSHint will ignore.
  "browser": true,    // Standard browser globals e.g. `window`, `document`.
  
  // Enforcing
  "bitwise": false,   // true: Prohibit bitwise operators (&, |, ^, etc.)
  "camelcase": true,  // true: Identifiers must be in camelCase
  "curly": true,      // true: Require {} for every new block or scope
  "eqeqeq": true,     // true: Require triple equals (===) for comparison
  "forin": true,      // true: Require filtering for..in loops with obj.hasOwnProperty()
  "immed": false,     // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
  "indent": 4,        // {int} Number of spaces to use for indentation
  "latedef": false,   // true: Require variables/functions to be defined before being used
  "newcap": false,    // true: Require capitalization of all constructor functions e.g. `new F()`
  "noarg": true,      // true: Prohibit use of `arguments.caller` and `arguments.callee`
  "noempty": true,    // true: Prohibit use of empty blocks
  "nonew": false,     // true: Prohibit use of constructors for side-effects (without assignment)
  "plusplus": false,  // true: Prohibit use of `++` & `--`
  
  "quotmark": "single",// Quotation mark consistency:
      //false: do nothing (default)
      //true: ensure whatever is used is consistent
      //"single" : require single quotes
      //"double" : require double quotes
  
  "undef": true,          // true: Require all non-global variables to be declared (prevents global leaks)
  "unused": true,         // true: Require all defined variables be used
  "strict": true,         // true: Requires all functions run in ES5 Strict Mode
  "trailing": false,      // true: Prohibit trailing whitespaces
  "maxparams": false,     // {int} Max number of formal params allowed per function
  "maxdepth": false,      // {int} Max depth of nested blocks (within functions)
  "maxstatements": false, // {int} Max number statements per function
  "maxcomplexity": false, // {int} Max cyclomatic complexity per function
  "maxlen": 80,           // {int} Max number of characters per line
  "node": true,
  "rhino": false,
  "couch": false,
  "wsh": true,            // Windows Scripting Host.
  
  // Relaxing
  "asi": false,       // true: Tolerate Automatic Semicolon Insertion (no semicolons)
  "boss": false,      // true: Tolerate assignments where comparisons would be expected
  "debug": false,     // true: Allow debugger statements e.g. browser breakpoints.
  "eqnull": false,    // true: Tolerate use of `== null`
  "es5": false,       // true: Allow ES5 syntax (ex: getters and setters)
  "esnext": false,    // true: Allow ES.next (ES6) syntax (ex: `const`)
    //"moz": false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)
    // (ex: `for each`, multiple try/catch, function expression…)
  
  "evil": false,      // true: Tolerate use of `eval` and `new Function()`
  "expr": true,       // true: Tolerate `ExpressionStatement` as Programs
  "funcscope": false, // true: Tolerate defining variables inside control statements"
  "globalstrict": false,// true: Allow global "use strict" (also enables 'strict')
  "iterator": false,  // true: Tolerate using the `__iterator__` property
  "lastsemic": false, // true: Tolerate omitting a semicolon for the last statement of a 1-line block
  "laxbreak": false,  // true: Tolerate possibly unsafe line breakings
  "laxcomma": false,  // true: Tolerate comma-first style coding
  "loopfunc": false,  // true: Tolerate functions being defined in loops
  "multistr": false,  // true: Tolerate multi-line strings
  "proto": false,     // true: Tolerate using the `__proto__` property
  "scripturl": false, // true: Tolerate script-targeted URLs
  "smarttabs": false, // true: Tolerate mixed tabs/spaces when used for alignment
  "shadow": false,    // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
  "sub": false,       // true: Tolerate using `[]` notation when it can still be expressed in dot notation
  "supernew": false,  // true: Tolerate `new function () { ... };` and `new Object;`
  "validthis": false, // true: Tolerate using this in a non-constructor function

  "jquery": true,
  "prototypejs": false,
  "mootools": false,
  "dojo": false,

  // Environments
  "browser": true,      // Web Browser (window, document, etc)
  "couch": false,       // CouchDB
  "devel": true,        // Development/debugging (alert, confirm, etc)
  "dojo": false,        // Dojo Toolkit
  "jquery": false,      // jQuery
  "mootools": false,    // MooTools
  "node": true,         // Node.js
  "nonstandard": false, // Widely adopted globals (escape, unescape, etc)
  "prototypejs": false, // Prototype and Scriptaculous
  "rhino": false,       // Rhino
  "worker": false,      // Web Workers
  "wsh": false,         // Windows Scripting Host
  "yui": false,         // Yahoo User Interface

  "predef": [ // Custom globals.
    //"exampleVar",
    //"anotherCoolGlobal",
    //"iLoveDouglas"
  ],
  
  // Legacy
  "nomen": true,        // true: Prohibit dangling `_` in variables
  "onevar": true,       // true: Allow only one `var` statement per function
  "passfail": false,    // true: Stop on first error
  "white": false,       // true: Check against strict whitespace and indentation rules


  // Development.
  "debug": false,       // Allow debugger statements e.g. browser breakpoints.
  "devel": true,        // Allow developments statements e.g. `console.log();`.

  // ECMAScript 5.
  "es5": true,            // Allow ECMAScript 5 syntax.
  "strict": false,        // Require `use strict` pragmain every file.
  "globalstrict": false,  // Allow global "use strict" (also enables 'strict').

  // The Good Parts.
  "asi": true,            // Tolerate Automatic Semicolon Insertion (no semicolons).
  "laxbreak": true,       // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
  "bitwise": false,       // Prohibit bitwise operators (&, |, ^, etc.).
  "boss": false,          // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
  "curly": true,          // Require {} for every new block or scope.
  "eqeqeq": true,         // Require triple equals i.e. `===`.
  "eqnull": false,        // Tolerate use of `== null`.
  "evil": false,          // Tolerate use of `eval`.
  
  //允许赋值a && b; a || b;语句
  "expr": true,           // Tolerate `ExpressionStatement` as Programs.
  "forin": false,         // Tolerate `for in` loops without `hasOwnPrototype`.
  "immed": true,          // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
  "latedef": true,        // Prohipit variable use before definition.
  "loopfunc": false,      // Allow functions to be defined within loops.
  "noarg": true,          // Prohibit use of `arguments.caller` and `arguments.callee`.
  "regexp": true,         // Prohibit `.` and `[^...]` in regular expressions.
  "regexdash": false,     // Tolerate unescaped last dash i.e. `[-...]`.
  "scripturl": true,      // Tolerate script-targeted URLs.
  "shadow": false,        // Allows re-define variables later in code e.g. `var x=1; x=2;`.
  "supernew": false,      // Tolerate `new function () { ... };` and `new Object;`.
  "undef": true,          // Require all non-global variables be declared before they are used.
  "unused": true,

  // Personal styling preferences.
  "newcap": true,     // Require capitalization of all constructor functions e.g. `new F()`.
  "noempty": true,    // Prohibit use of empty blocks.
  "nonew": true,      // Prohibit use of constructors for side-effects.
  "nomen": true,      // Prohibit use of initial or trailing underbars in names.
  "onevar": false,    // Allow only one `var` statement per function.
  "plusplus": false,  // Prohibit use of `++` & `--`.
  "sub": false,       // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
  "trailing": true,   // Prohibit trailing whitespaces.
  "white": false,     // Check against strict whitespace and indentation rules.
  "indent": 4         // Specify indentation spacing
}